# Docker-Compose file to orchestrate the initial containers ['zookeeper', 'rabbitmq', 'orchestrator']

version: '3'

# the build order is guaranteed to be
# 1. zoo
# 2. rabbitmq
# 3. orchestrator

services:
  zoo:
    image: zookeeper
    container_name: zoo
    hostname: zoo
    ports:
      - 2181:2181
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888;2181
    restart: on-failure
  
  rabbitmq:
    image: rabbitmq:3.8.3
    container_name: rabbitmq
    hostname: rabbitmq
    restart: on-failure
  
  # if running locally then change the ports of the orchestrator to "5050:8000" to avoid port conflicts with a web server already running on port 80

  orchestrator:
    build: ./orchestrator
    image: orchestrator:latest
    container_name: orchestrator
    ports:
      - "80:8000"
      # - "5050:8000"
    environment:
      - TEAM_NAME=CC_0125_0172_0242_1557
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker
      - ./orchestrator:/orchestrator
    links:
      - rabbitmq
      - zoo
    depends_on:
      - rabbitmq 
      - zoo
    restart: on-failure
  
# Moved the master and slave spawning code to the orchestrator

  # master:
  #   build: ./worker
  #   image: worker:latest
  #   container_name: master
  #   command: sh -c "sleep 25 && python master_slave.py"
  #   environment:
  #     - TEAM_NAME=CC_0125_0172_0242_1557
  #     - MASTER=1
  #   volumes:
  #     - ./worker:/worker
  #   links:
  #     - rabbitmq
  #     - zoo
  #   depends_on:
  #     - rabbitmq
  #     - zoo
  #   restart: on-failure

  # slave:
  #   build: ./worker
  #   image: worker:latest
  #   container_name: slave
  #   command: sh -c "sleep 30 && python master_slave.py"
  #   environment:
  #     - TEAM_NAME=CC_0125_0172_0242_1557
  #     - MASTER=0
  #   volumes:
  #     - ./worker:/worker
  #   links:
  #     - rabbitmq
  #     - zoo
  #   depends_on:
  #     - rabbitmq
  #     - zoo
  #   restart: on-failure
